#include <stdio.h>
#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/distance_sensor.h>
#include <webots/light_sensor.h>
#include <webots/gps.h>

#define TIME_STEP 64       
#define MAX_SPEED 6.28
#define LIGHT_THRESHOLD 500.0
#define WALL_THRESHOLD 100.0
#define GPS_THRESHOLD 0.01 

bool is_dead_end();

int main(int argc, char **argv) {
  // api 
  wb_robot_init();
  
  // accessing the motors 
  WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");
  WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);
  
  // setting motors 
  double light_deadend[11];
  double gps_coordinates[10][3]; // Store up to 10 dead-end coordinates (x, y, z)
  double left_speed = MAX_SPEED;
  double right_speed = MAX_SPEED;
  int nest = 0;
  double max = 0;
  int j = 0;
  
  // accessing the distance sensor 
  WbDeviceTag distance_sensors[8];
  char dist_sensor_name[50];
  for (int i = 0; i < 8; i++) {
    sprintf(dist_sensor_name, "ps%d", i);
    distance_sensors[i] = wb_robot_get_device(dist_sensor_name);
    wb_distance_sensor_enable(distance_sensors[i], TIME_STEP);
  }
  
  // accessing the light sensor 
  WbDeviceTag light_sensor = wb_robot_get_device("ls0"); // assuming the front light sensor is named "ls0"
  wb_light_sensor_enable(light_sensor, TIME_STEP);

  // gps 
  WbDeviceTag gps = wb_robot_get_device("gps");
  wb_gps_enable(gps, TIME_STEP);

  // Dead-end detection variables
  int dead_end_count = 0;
  double dead_end_timer = 0;

  // checking if the robot is hitting a dead end 
  bool is_dead_end() {
    double front_distance = wb_distance_sensor_get_value(distance_sensors[0]);
    double current_time = wb_robot_get_time();

    
    if (front_distance > 100) {
      if (dead_end_count == 0 || (current_time - dead_end_timer) > 1.7) {
        // setting the timer 
        dead_end_timer = current_time;
        dead_end_count = dead_end_count + 1;
      }
    }

    // while robot hits 2 walls withing 4 secs then its a dead end 
    if (dead_end_count >= 2) {
      dead_end_count = 0; // Reset for future detections
      return true;
    }

    // setting the dead end count 
    if ((current_time - dead_end_timer) > 10.0) {
      dead_end_count = 0;
    }
    
    return false;
  }
  

while (wb_robot_step(TIME_STEP) != -1) {
  // Get the current GPS coordinates
  const double *gps_values = wb_gps_get_values(gps);

  // getting th distanc sensor values 
  bool left_wall = wb_distance_sensor_get_value(distance_sensors[5]) > WALL_THRESHOLD;
  bool left_corner = wb_distance_sensor_get_value(distance_sensors[6]) > WALL_THRESHOLD;
  bool front_wall = wb_distance_sensor_get_value(distance_sensors[7]) > WALL_THRESHOLD;

  // getting the value of light sensor by detecting it 
  double light_value = wb_light_sensor_get_value(light_sensor);

  // looking for dead end 
  if (is_dead_end()) {
  
    if (nest < 10) {
      nest++;
      light_deadend[nest] = light_value;

      // location from the gps 
      gps_coordinates[nest - 1][0] = gps_values[0]; // x-coordinate
      gps_coordinates[nest - 1][1] = gps_values[1]; // y-coordinate
      gps_coordinates[nest - 1][2] = gps_values[2]; // z-coordinate

      printf("%d  ", nest);
      printf("Dead end found\n");
      printf("value of light sensor  %f\n", light_deadend[nest]);
      printf("location of dead end : x = %f, y = %f, z = %f\n", gps_values[0], gps_values[1], gps_values[2]);
    }

    if (nest == 10) {
      // going through the array 
      for (int i = 1; i <= 10; i++) {
        if (light_deadend[i] > max) {
          max = light_deadend[i]; // change max if higher value found 
          j = i;
        }
      }
      printf("higest intensity  %f at dead end %d\n", max, j);
      printf("location of robot at most light  x = %f, y = %f, z = %f\n",
             gps_coordinates[j - 1][0], gps_coordinates[j - 1][1], gps_coordinates[j - 1][2]);
             nest++;
    }

    // confirming if the robot has reached the max light intensity dead end . 
    if (fabs(gps_values[0] - gps_coordinates[j - 1][0]) < GPS_THRESHOLD &&
        fabs(gps_values[1] - gps_coordinates[j - 1][1]) < GPS_THRESHOLD &&
        fabs(gps_values[2] - gps_coordinates[j - 1][2]) < GPS_THRESHOLD) {
      printf("\n\nYOU HAVE SUCCESSFULLY REACHED THE DEAD END WITH MAXIMUM LIGHT INTENSITY!\n\n");
      break;
    }
  } else {
    // logic behind the robots movement 
    if (front_wall) {
      // going right if there in wall stright 
      left_speed = MAX_SPEED;
      right_speed = -MAX_SPEED;
    } else {
      if (left_wall) {
        // going stright while no wall found 
        left_speed = MAX_SPEED / 2;
        right_speed = MAX_SPEED / 2;
      } else if (left_corner) {
        // turn very less if wall is present 
        left_speed = MAX_SPEED;
        right_speed = MAX_SPEED / 4;
      } else {
        // left if wall not found
        left_speed = MAX_SPEED / 4;
        right_speed = MAX_SPEED;
      }
    }
  }


  wb_motor_set_velocity(left_motor, left_speed);
  wb_motor_set_velocity(right_motor, right_speed);
}


wb_robot_cleanup();


  return 0;
}
